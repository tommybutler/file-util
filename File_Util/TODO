TODO List for File::Util

Not necessarily listed in order of priority:

1)  [DONE] Set up formal (not just private) GIT repository

2)  [DONE] Separate documenation examples into a cookbook (POD)

3)  [DONE] Gradually transform methods to accept input parameters in a
    *::Class-like style (hashrefs, etc) while preserving backward compatibility

4)  Support for Perl IO "layers", which just hasn't been requested but
    should be there for completeness

5)  [MOSTLY DONE] Transform (where useful) various methods to accept callbacks.
    File::Util::list_dir() is the primary target

6)  [DONE] Set up File::Util::list_dir() to take a listref of regexes

7)  [IN PROGRESS] Continue improving the distribution so as to make
    it compliant with Fedora packaging standards; it is already a
    maintained package for Ubuntu and ActiveState

8)  [DONE] Code clean up in POD documentation examples.

9)  [DONE] Improve and simplify code examples in POD documentation.

10) [IN PROGRESS] Constantly improve test suite until Devel::Cover
    scores are something to be proud of.  We're doing much better
    than we used to only less than 1 month ago

11) [IN PROGRESS] Remove all traces of old invocation syntax from the POD

12) Now that documentation has been divided into the ::Manual and the
    ::Cookbook, I want to add more content to them.  More examples,
    More fully-functional programs (recipes).

13) Create a less-verbose Exception class (right now we only have
    Exception::Diagnostic, which is overkill for power users and
    "experts" who just want a quick, clean error message instead of a full-page
    printout of what went wrong, how to fix it, and whose fault it was --
    followed by a callstack.  We need the less verbose alternative now.
